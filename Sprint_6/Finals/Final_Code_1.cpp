/*
 https://contest.yandex.ru/contest/25070/run-report/82208907/
ПРИНЦИП РАБОТЫ:
Поскольку мы не ожидаем плотного графа, то будем хранить ребра в виде списков смежности. За основу берется алгоритм Прима, описанный в разделе Минимальное остовное дерево, но с рядом модификаций.
Комментарии даны ниже в коде.

ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ:
1) Если у графа есть кратные ребра, то берём то у которого больший вес. Петли - игнорируем.
2) При инициализации создается хэш-таблица вершин, еще не добавленных в остов.
3) В случае кратных ребёр будем записывать в граф ребра с максимальным весом.
4) Чтобы дерево получилось максимальным мы будем извлекать ребра из графа с наибольшим весом, используя приоритетную очередь.

Если граф несвязнный, то остовное дерево составить не получится (потому что будет несколько компонент связности).
Если граф связный, то будет осуществлен обход по всем вершинам и их ребрам, причем ребра будут выбираться с наибольшим весом => дерево будет иметь максимальный вес.

Пусть у нас V вершин и E рёбер в графе.
ВРЕМЕННАЯ СЛОЖНОСТЬ:
1) Создание хэш-таблиц ~O(V)
2) Добавление рёбер ~O(E)
3) Вставка и удаление рёбер в приоритетную очередь ~O(log V) в худшем случае, если вершина, ребра которое мы добавляем, соединена со всеми остальными вершинами
4) Вставка, поиск и удаление элементов в хэш-таблицы в худшем случае ~O(V) в среднем ~O(1)
5) В худшем случае, прежде чем закончатся не добавленные вершины, в очереди будут все ребра => добавление E вершин в приоритетную очередь ~O(E log V)
Итого: ~O(E log V)

ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ:
1) Граф мы храним в виде списков смежности => его пространственная сложность ~O(V + E)
2) Хэш-таблицы вершин ~O(V)
3) Приоритетная очередь из рёбер ~O(E)
Итого: ~O(V + E)

*/

#include<iostream>
#include<unordered_map>
#include<unordered_set>
#include<queue>
using namespace std;

// Класс используемого графа
class Graph {
public:
	Graph(int V) {
		vertices_num = V;

		// Зарезервируем объем хэш-таблиц под задаваемое число вершин
		graph.rehash(V);
		added.rehash(V);
		not_added.rehash(V);

		for (int i = 1; i <= V; i++) {
			not_added.insert(i);
		}
	};

	// Добавление ребра в граф
	void add_weighted_edge(int start, int end, int weight) {
		if (start != end) {
			// Игнорируем петли
			if (graph[start][end] == 0) {
				graph[start][end] = weight;
				graph[end][start] = weight;
			}
			else if (graph[start][end] < weight) {
				// Если добавляем уже существующее ребро с большим весом, то обновляем у ребра вес
				graph[start][end] = weight;
				graph[end][start] = weight;
			}
		}
	}


	// Добавление ребер исходящих из вершины v в остов
	void add_vertex(int v) {

		// Добавляем вершину в список добавленных в остов вершин
		added.insert(v);

		// Удаляем вершину из списка не добавленыхх в остов вершин
		not_added.erase(v);

		// Проходимся по всем ребрам, исходящим из добавляемой вершины и рассматриваем вершину на другом конце ребра
		for (auto it = graph[v].begin(); it != graph[v].end(); it++) {

			// Если принимающая вершина ещё не добавлена, то добавляем связывающее ребро в остовное дерево (приоритетную очередь)
			if (not_added.find(it->first) != not_added.end()) {
				edges.push({ it->second,{v,it->first} });
			}
		}
	}


	// Поиск максимального остовного дерева
	int find_MaxST_weight() {

		// Зададим нулевой изначальный вес
		int weight = 0;

		// Если граф состоит из одной вершины, то вернём нулевой вес
		if (vertices_num == 1) {
			return weight;
		}

		// Если граф пустой, то вернём вес равный -1, чтобы указать на отсутствие любого дерева
		if (graph.begin() == graph.end()) {
			return -1;
		}

		// Возьмем любую вершину графа (в данном случае первую в хэш-таблице), в алгоритме Прима не важно с какой вершины начинать,
		// поскольку все вершины попадут в остовное дерево
		int v = graph.begin()->first;

		// Добавим выбранную вершину в остов
		add_vertex(v);

		// Будем продолжать процедуру пока не закончатся вершины или рёбра
		while ((!not_added.empty()) & (!edges.empty())) {

			// Извлекаем ребро из приоритетной очереди с наибольшим весом
			pair<int, pair<int, int>> ex = edges.top();

			// Извлекаем вершины ребра, его исходящая вершина уже добавлена в остов, тогда как принимающая пока ещё нет
			pair<int, int> e = ex.second;

			// Удаляем ребро из очереди
			edges.pop();

			// Если принимающая вершина ещё не была добавлена, то
			if (not_added.find(e.second) != not_added.end()) {

				// Увеличиваем вес графа на вес рассматриваемого ребра
				weight += graph[e.first][e.second];

				// Добавляем все исходящие ребра из принимающей вершины
				add_vertex(e.second);
			}

		}

		// Если у нас остались не выбранные вершины, то граф несвязный => нельзя построить остовное дерево, возвращаем -1
		// В противном случае, возвращаем максимальный вес полученного дерева
		if (!not_added.empty()) {
			return -1;
		}
		else {
			return weight;
		}
	}

private:
	int vertices_num; // Число вершин в графе

	unordered_map<int, unordered_map<int, int>> graph; // Граф в виде списков смежности
	unordered_set<int> added; // Множество вершин, уже добавленных в остов
	unordered_set<int> not_added; // Множество вершин, ещё не добавленных в остов

	// Массив ребер исходящих из остовного дерева представим в виде очереди с приоритетом, где первым аргументом является вес ребра, вторым - начало и конец ребра
	priority_queue<pair<int, pair<int, int>>> edges;

};

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int V, E;
	cin >> V >> E;
	Graph graph(V);

	int start_vert, end_vert, weight;
	for (int i = 0; i < E; i++) {
		cin >> start_vert >> end_vert >> weight;
		graph.add_weighted_edge(start_vert, end_vert, weight);
	}


	int max_weight = graph.find_MaxST_weight();

	if (max_weight == -1) {
		cout << "Oops! I did it again" << endl;
	}
	else {
		cout << max_weight << endl;
	}

	return 0;
}